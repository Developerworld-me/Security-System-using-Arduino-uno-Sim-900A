#include "SIM900.h"
#include <SoftwareSerial.h>
#include <Wire.h>
//If not used, is better to exclude the HTTP library,
//for RAM saving.
//If your sketch reboots itself proprably you have finished,
//your memory available.
//#include "inetGSM.h"

//If you want to use the Arduino functions to manage SMS, uncomment the lines below.
#include "sms.h"
SMSGSM sms;
#define PAYLOAD_SIZE 2 // how many bytes to expect from each I2C salve node
#define NODE_MAX 6 // maximum number of slave nodes (I2C addresses) to probe
#define START_NODE 2 // The starting I2C address of slave nodes
#define NODE_READ_DELAY 1000 // Some delay between I2C node reads
//To change pins for Software Serial, use the two lines in GSM.cpp.

//GSM Shield for Arduino
//www.open-electronics.org
//this code is based on the example of Arduino Labs.

//Simple sketch to send and receive SMS.

int numdata;
boolean started=false;
char smsbuffer[160];
char n[20];
int val;
int tempPin = 1;
int nodePayload[PAYLOAD_SIZE];
void setup()
{
     //Serial connection.
     Serial.begin(9600);
     Serial.println("GSM Shield testing.");
     //Start configuration of shield with baudrate.
     //For http uses is raccomanded to use 4800 or slower.
      Serial.println("MASTER READER NODE");
  Serial.print("Maximum Slave Nodes: ");
  Serial.println(NODE_MAX);
  Serial.print("Payload size: ");
  Serial.println(PAYLOAD_SIZE);
  Serial.println("***********************");
  Wire.begin();        // Activate I2C link
 if (gsm.begin(2400)) {
         Serial.println("\nstatus=READY");
          started=true;
     } else Serial.println("\nstatus=IDLE");
   

};

void loop()
{float mv = ( val/1024.0)*5000; 
  float cel = mv/10;
  float farh = (cel*9)/5 + 32; 
  val = analogRead(tempPin);
  Serial.print("TEMPRATURE = ");
  Serial.print(cel);
  Serial.print("*C");
  Serial.println();
  delay(1000);
  if(cel>47)
  { if (sms.SendSMS("+919158546988", "alert fire"))
          Serial.println("\nSMS sent OK");
          delay(1000);
     }else Serial.println("\nstatus=IDLE"); 
     for (int nodeAddress = START_NODE; nodeAddress <= NODE_MAX; nodeAddress++) { // we are starting from Node address 2
    Wire.requestFrom(nodeAddress, PAYLOAD_SIZE);    // request data from node#
    if(Wire.available() == PAYLOAD_SIZE) {  // if data size is avaliable from nodes
      for (int i = 0; i < PAYLOAD_SIZE; i++) nodePayload[i] = Wire.read();  // get nodes data   
      for (int j = 0; j < PAYLOAD_SIZE; j++) Serial.println(nodePayload[j]);   // print nodes data  
   if(nodePayload[0]==1)
  { Serial.println("motion detected pir1");

    //Enable this two lines if you want to send an SMS.
    sms.SendSMS("+919158546988", "Alert,Motion detected");
      Serial.println("\nSMS sent OK");
}
  if(nodePayload[1]==1)
  { Serial.println("motion detected pir2");
      if(started){
    //Enable this two lines if you want to send an SMS.
   sms.SendSMS("+919158546988", "Alert,Motion detected");
      Serial.println("\nSMS sent OK");   }  
      }}
    }
    delay(NODE_READ_DELAY); 
     };
